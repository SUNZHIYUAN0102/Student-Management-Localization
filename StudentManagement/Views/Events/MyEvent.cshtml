@{
    ViewBag.Title = "Event Page";
}

<h2>My Events</h2>
<div id="calender"></div>

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <button id="btnDelete" class="col-2 btn btn-danger float-right">
                    Remove
                </button>
                <button id="btnEdit" class="col-2 btn btn-warning">
                    Edit
                </button>
                <p class="mt-3" id="pDetails"></p>
            </div>
        </div>
    </div>
</div>

<div id="myModalSave" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="col-md-12 form-horizontal">
                    <input type="hidden" id="hdEventID" value=null />
                    <div class="form-group">
                        <label>Subject</label>
                        <input autocomplete="off" type="text" id="txtSubject" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Start</label>
                        <div class="input-group" id="dtp1">
                            <input type="datetime-local" id="txtStart" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>End</label>
                        <div class="input-group" id="dtp2">
                            <input type="datetime-local" id="txtEnd" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <textarea id="txtDescription" rows="3" class="form-control"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Theme Color</label>
                        <select id="ddThemeColor" class="form-control">
                            <option value="">Default</option>
                            <option value="red">Red</option>
                            <option value="blue">Blue</option>
                            <option value="black">Black</option>
                            <option value="green">Green</option>
                        </select>
                    </div>
                    <button type="button" id="btnSave" class="col-4 btn btn-primary">Save</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6,es7,Array.from,Symbol,console"></script> 
    <script src="https://unpkg.com/dayjs-with-plugins"></script> 
    <script>
        $(document).ready(function () {
            var events = [];
            var selectedEvent = null;
            FetchEventAndRenderCalendar();
            function FetchEventAndRenderCalendar() {
                events = [];
                axios({
                    url: '/api/Events',
                    method: 'GET',
                }).then(res => {
                    for (let i = 0; i < res.data.data.length; i++) {
                        events.push({
                            eventId: res.data.data[i].id,
                            title: res.data.data[i].title,
                            description: res.data.data[i].description,
                            start: res.data.data[i].startTime,
                            end: res.data.data[i].endTime,
                            color: res.data.data[i].themeColor,
                        })
                    }
                    console.log(events)
                    GenerateCalender(events);
                }).catch(e => {
                    alert('failed');
                })
            }

            function GenerateCalender(events) {
                $('#calender').fullCalendar('destroy');
                $('#calender').fullCalendar({
                    defaultDate: new Date(),
                    timeFormat: 'h(:mm)a',
                    header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'month,basicWeek,basicDay,agenda'
                    },
                    eventLimit: true,
                    eventColor: '#4e73df',
                    eventTextColor: 'white',
                    events: events,
                    eventClick: function (calEvent, jsEvent, view) {
                        selectedEvent = calEvent;
                        $('#myModal #eventTitle').text(calEvent.title);
                        var $description = $('<div/>');
                        $description.append($('<p/>').html('<b>Title: </b>' + calEvent.title));
                        $description.append($('<p/>').html('<b>Start: </b>' + calEvent.start._i));
                        $description.append($('<p/>').html('<b>End: </b>' + calEvent.end._i));
                        $description.append($('<p/>').html('<b>Description: </b>' + calEvent.description));
                        $('#myModal #pDetails').empty().html($description);
                        $('#myModal').modal();
                    },
                    selectable: true,
                    select: function () {
                        selectedEvent = {
                            eventId: null,
                            title: '',
                            description: '',
                            start: '',
                            end: '',
                            color: ''
                        };
                        openAddEditForm();
                        $('#calendar').fullCalendar('unselect');
                    },
                })
            }

            $('#btnEdit').click(function () {
                openAddEditForm();
            })
            $('#btnDelete').click(function () {
                if (selectedEvent != null && confirm('Are you sure?')) {
                    axios({
                        method: 'DELETE',
                        url: '/api/Events',
                        params: {
                            'eventId': selectedEvent.eventId
                        }
                    }).then((res => {
                        if (res.data.data.status) {
                            FetchEventAndRenderCalendar();
                            $('#myModal').modal('hide');
                        }
                    })).catch(e => {
                        alert('Failed')
                    })
                }
            })

            function openAddEditForm() {
                if (selectedEvent != null) {
                    $('#hdEventID').val(selectedEvent.eventId);
                    $('#txtSubject').val(selectedEvent.title);
                    $('#txtStart').val(selectedEvent.start._i);
                    $('#txtEnd').val(selectedEvent.end._i);
                    $('#txtDescription').val(selectedEvent.description);
                    $('#ddThemeColor').val(selectedEvent.color);
                }
                $('#myModal').modal('hide');
                $('#myModalSave').modal();
            }

            $('#btnSave').click(function () {
                if ($('#txtSubject').val().trim() == "") {
                    alert('Subject required');
                    return;
                }
                if ($('#txtStart').val().trim() == "") {
                    alert('Start date required');
                    return;
                }
                if ($('#txtEnd').val().trim() == "") {
                    alert('End date required');
                    return;
                }
                else {
                    var startDate = $('#txtStart').val();
                    var endDate = $('#txtEnd').val();
                    if (!dayjs(startDate).isBefore(dayjs(endDate))) {
                        alert('Invalid end date')
                        return
                    }
                }

                var data = {
                    Id: $('#hdEventID').val(),
                    Title: $('#txtSubject').val().trim(),
                    StartTime: $('#txtStart').val().trim(),
                    EndTime: $('#txtEnd').val().trim(),
                    Description: $('#txtDescription').val(),
                    ThemeColor: $('#ddThemeColor').val(),
                }
                SaveEvent(data);
            })

            function SaveEvent(data) {
                axios({
                    method: 'POST',
                    url: '/api/Events',
                    data: data
                }).then(data => {
                    if (data.status) {
                        FetchEventAndRenderCalendar();
                        $('#myModalSave').modal('hide');
                    }
                }).catch(e => {
                    alert('failed');
                })
            }
        })
    </script>
}